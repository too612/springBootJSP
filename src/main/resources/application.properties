# server port
server.port=8080

# 소스파일에 변화가 있을 때 자동으로 서버 재 시작 설정
spring.devtools.restart.enabled=true

# 정적 리소스에 변화가 있을 때 바로 반영한다.
spring.devtools.livereload.enabled=true

# database (postgres)
# log4j 미적용 (spring.datasource.driver-class-name)
spring.datasource.driver-class-name=org.postgresql.Driver
# log4j 적용 (spring.datasource.driver-class-name)
#spring.datasource.driver-class-name	= net.sf.log4jdbc.sql.jdbcapi.DriverSpy
# log4j 미적용 (spring.datasource.url)
spring.datasource.url=jdbc:postgresql://localhost:5432/DEV
# log4j 적용 (spring.datasource.url)
#spring.datasource.url=jdbc:log4jdbc:postgresql://localhost:5432/DEV
spring.datasource.username=DEV
spring.datasource.password=dev

#JSP
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp


#[추가할 설정]
#연결 여부 확인을 위한 테스트 쿼리
spring.datasource.hikari.connection-test-query=SELECT 1

#로깅 대상(개발 / 배포) 배포시에는 local -> prod
#spring.profiles.active=local
#logging.config=classpath:logback-${spring.profiles.active}.xml

# 매핑할 모델의 패키지 경로 (mybatis 매핑 type을 짧게 쓰기 위한 설정)
mybatis.type-aliases-package=com.base.app.dto

# mapper.xml 위치 명시
mybatis.mapper-locations=/mapper/**/*.xml

#오류 응답에 exception의 내용을 포함할지 여부
server.error.include-exception=TRUE

#오류 응답에 stacktrace 내용을 포함할지 여부 (ALWAYS, NEVER, ON_TRACE_PARAM)
server.error.include-stacktrace=ALWAYS

#브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부
server.error.whitelabel.enabled=FALSE

#################### p6Spy 관련설정 start #################### 
# JDBC 이벤트 로깅을 위한 P6LogFactory 등록
spring.datasource.p6spy.enable-logging=true
# com.p6spy.engine.spy.appender.MultiLineFormat 사용 (SingleLineFormat 대신)
spring.datasource.p6spy.multiline=true
# 기본 리스너들을 위한 로깅 사용 [slf4j, sysout, file, custom]
spring.datasource.p6spy.logging=slf4j
# 실제 값으로 '?'를 대체한 효과적인 SQL 문자열을 추적 시스템에 보고
# 참고: 이 설정은 로깅 메시지에 영향을 주지 않음
spring.datasource.p6spy.tracing.include-parameter-values=true
# 파일 로깅 사용 시 로그 파일 지정: 로그 파일 사용 (logging=file일 때만)
#spring.datasource.p6spy.log-file=spy.log
# 커스텀 로거 클래스 지정: 사용할 클래스 파일 (logging=custom일 때만). 클래스는 com.p6spy.engine.spy.appender.FormattedLogger를 구현해야 함
#spring.datasource.p6spy.custom-appender-class=my.custom.LoggerClass
# 커스텀 로그 포맷 지정: 지정하면 com.p6spy.engine.spy.appender.CustomLineFormat이 이 로그 포맷으로 사용됨
#spring.datasource.p6spy.log-format=
# 로그 메시지 필터링을 위한 정규 표현식 패턴 사용: 지정되면 일치하는 메시지만 로깅됨
#spring.datasource.p6spy.log-filter.pattern=
#################### p6Spy 관련설정 end #################### 